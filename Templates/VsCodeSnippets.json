{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"boilerplate":
    {
        "prefix" : "boilerplate",
                   "body" : [
                       "#include<bits\/stdc++.h>",
                       "using namespace std;",
                       "#define endl '\\n'",
					   "#define ll long long",
                       "#define pb push_back",
                       "#define all(x) (x).begin(), (x).end()",
                       "int main()",
                       "{",
					   "    $0",
                       "    return 0;",
                       "}"
                   ],
        "description" : "to produce the main snippet for cpp"
    },
	"test_case":
    {
        "prefix" : "test_case",
                   "body" : [
                    "#include<bits\/stdc++.h>",
                    "using namespace std;",
                    "#define endl '\\n'",
                    "#define ll long long",
                    "#define pb push_back",
                    "#define all(x) (x).begin(), (x).end()",
                       "int main()",
                       "{",
					   "    int t; cin>>t;",
					   "    while(t--)",
					   "    {",
					   "        $0",
					   "    }",
                       "    return 0;",
                       "}"
                   ],
        "description" : "to produce the main snippet for cpp"
    },
	"fast_io":
    {
        "prefix" : "fast_io",
                   "body" : [
                       "ios_base::sync_with_stdio(0);",
					   "cin.tie(0); cout.tie(0);",
					   "$0",
                   ],
        "description" : "to produce the main snippet for cpp"
    },
    "for_loop":
    {
        "prefix" : "fo",
                   "body" : [
                       "for(int $1 = 0; $1 < $2; $1++) $3",
                   ],
        "description" : "to produce the main snippet for cpp"
    },
    "perfect_square":
    {
        "prefix" : "ps",
                   "body" : [
                    "auto isPrefectSquare = [&](int value) -> bool {",
                    "    return (int)sqrtl(value) * (int)sqrtl(value) == value;",
                    "};",
                   ],
        "description" : "to produce the main snippet for cpp"
    },
    "freqMap":
    {
        "prefix" : "freqMap",
                "body" : [
                    "map<int, int>freq;",
                    "for(int i = 0; i < n; i++) {",
                    "    int val; cin>>val;",
                    "    freq[val]++;",
                    "}",
                ],
        "description" : "to produce the main snippet for cpp"
    },
    "Binary Search": 
    {
        "prefix": "BinarySearchTemplate",
        "body": [
          "int lo = 0, hi = n-1, ans, target;",
          "while(lo <= hi){",
          "    int mid = lo + (hi - lo)/2;",
          "    if(v[mid] == target){",
          "        ans = mid;",
          "        break;",
          "    }",
          "    else if(v[mid] < target) lo = mid + 1;",
          "    else if(v[mid] > target) hi = mid - 1;",
          "}"
        ],
        "description": ""
    },
    "Sieve": {
        "prefix": "SieveTemplate",
        "body": [
        "const int N = 1e7+7;",
        "bitset<N> marked;",
        "vector<int>primes;",
        "void sieve(int n){",
        "    marked.reset(); //sets every bit to 0",
        "    // vector<bool>marked(N, false);",
        "    marked[1] = true; // 1 not prime",
        "    for(int i = 2; i*i <= n; i++){",
        "        if(marked[i]) continue;",
        "        for(int j = i*i; j <= n; j += i){",
        "            marked[j] = true; // marked[i] == 0 means prime",
        "        }",
        "    }",
        "    //for(int i = 2; i < N; i++) if(!marked[i]) primes.pb(i);",
        "}"
        ],
        "description": ""
    },
    "BinaryExponentiation": {
    "prefix": "BinaryExponentiation",
    "body": [
        "int BinaryExponentiation(int x, int y){",
        "    int res = 1;",
        "    while(y > 0){",
        "        if(y & 1) res *= x; // MOD",
        "        y >>= 1; // -> y /= 2;",
        "        x *= x; // MOD",
        "    } // MOD for larger numbers",
        "    return res;",
        "}"
    ],
    "description": ""
    },
    "int 128": {
        "prefix": "integer 128 bit",
        "body": [
          "// int128 bit for numbers larger than 1e18. Will support numbers till 1e36",
          "// Typedef to ell -> extra long long",
          "typedef __int128 ell;",
          "",
          "// For printing",
          "std::ostream&",
          "operator<<( std::ostream& dest, __int128_t value ) {",
          "	std::ostream::sentry s(dest);",
          "	if (s) {",
          "		__uint128_t tmp = value < 0 ? -value : value; char buffer[ 128 ];",
          "		char* d = std::end( buffer );",
          "		do {	-- d; *d = \"0123456789\"[ tmp % 10 ]; tmp /= 10;} while ( tmp != 0 );",
          "		if ( value < 0 ) {-- d; *d = '-';}",
          "		int len = std::end( buffer ) - d;",
          "		if ( dest.rdbuf()->sputn( d, len ) != len ) {dest.setstate( std::ios_base::badbit );}",
          "	}",
          "	return dest;",
          "}",
          "",
          "// For reading _int128 to_read = read()",
          "__int128 read() {",
          "	__int128 x = 0, f = 1;",
          "	char ch = getchar();",
          "	while (ch < '0' || ch > '9') {if (ch == '-') f = -1; ch = getchar();}",
          "	while (ch >= '0' && ch <= '9') {x = x * 10 + ch - '0'; ch = getchar();}",
          "	return x * f;",
          "}",
          "",
          "// For debugging",
          "void _print(ell t) {cerr << t;}"
        ],
        "description": ""
    },
    "Factorial": {
        "prefix": "FactorialSnippet",
        "body": [
          "const int N = 1e7+7;",
          "int Factorial[N+1];",
          "void factorialPreCal() {",
          "    int ithFact = 1;",
          "    for(int i = 1; i <= N; i++) {",
          "        ithFact *= i;",
          "        // ithFact %= MOD;",
          "        Factorial[i] = ithFact;",
          "    }",
          "}"
        ],
        "description": "Factorial"
    },
    "nCr": {
        "prefix": "nCrSnippet",
        "body": [
          "int nCr(int n, int r) { ",
          "    if(r >= n) return 0LL;",
          "    int numerator = Factorial[n];",
          "    int denominator = Factorial[r] * Factorial[n-r];",
          "    int ans = numerator / denominator;",
          "    return ans;",
          "",
          "    // int numerator = Factorial[n] % MOD;",
          "    // int denominator = (Factorial[r] % MOD * Factorial[n-r] % MOD) % MOD;",
          "    // denominator = BinaryExponentiation(denominator, MOD-2); // for inverse",
          "    // int ans = (numerator % MOD * denominator % MOD) % MOD;",
          "    // return ans;",
          "}"
        ],
        "description": "nCr"
    },
    "nPr": {
        "prefix": "nPrSnippet",
        "body": [
          "int nPr(int n, int r) { ",
          "    if(r >= n) return 0LL;",
          "    int numerator = Factorial[n];",
          "    int denominator = Factorial[n-r];",
          "    int ans = numerator / denominator;",
          "    return ans;",
          "",
          "    // int numerator = Factorial[n] % MOD;",
          "    // int denominator = Factorial[n-r] % MOD;",
          "    // denominator = BinaryExponentiation(denominator, MOD-2); // for inverse",
          "    // int ans = (numerator % MOD * denominator % MOD) % MOD;",
          "    // return ans;",
          "}"
        ],
        "description": "nPr"
    },
    "CF Test Case Finder": {
        "prefix": "CfTestCaseFinder",
        "body": [
          "// Find CF Test Case",
          "for(int ith = 1; ith <= t; ith++) {",
          "    // place input here",
          "    ",
          "    if(ith == ${1:ithLine} && t == ${2:TotalTestCases}) {",
          "        //print output here",
          "        printf(\" \\n\");",
          "    }",
          "    if(t == ${2:TotalTestCases}) continue;",
          "    // rest of the code here",
          "    ",
          "}"
        ],
        "description": "CF Test Case Finder"
    }
}